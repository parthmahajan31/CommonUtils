package com.example.instyle.SharedPrefrences

import android.app.Activity
import android.app.ActivityManager
import android.app.Dialog
import android.content.Context
import android.content.Intent
import android.graphics.Color
import android.graphics.drawable.ColorDrawable
import android.net.ConnectivityManager
import android.net.Uri
import android.os.Build
import android.os.VibrationEffect
import android.os.Vibrator
import android.util.Log
import android.view.Gravity
import android.view.View
import android.view.Window
import android.view.WindowManager
import android.widget.Toast
import com.example.instyle.R
import com.tapadoo.alerter.Alerter


class CommonUtils {
    companion object {
        private lateinit var progressDialog: Dialog

        fun isNetworkConnected(context: Context): Boolean {
            val cm =
                context.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager
            return cm.activeNetworkInfo != null
        }

        fun shareIntent(
            context: Context,
            title: String?,
            message: String?
        ) {
            val shareIntent = Intent(Intent.ACTION_SEND)
            shareIntent.type = "text/plain"
            shareIntent.putExtra(Intent.EXTRA_SUBJECT, title)
            shareIntent.putExtra(Intent.EXTRA_TEXT, message)
            context.startActivity(Intent.createChooser(shareIntent, "Share via"))
        }

        fun shareVideo(
            context: Context,
            title: String?,
            path: Uri?,
            ts: String?
        ) {

//            File f = Environment. getExternalStorageDirectory();
//             File[] files = f.listFiles();
//             Uri uri=Uri.fromFile(files[0]);
            val shareIntent = Intent()
            shareIntent.action = Intent.ACTION_SEND
            shareIntent.putExtra(Intent.EXTRA_SUBJECT, title)
            //                shareIntent.putExtra(Intent.EXTRA_STREAM,Uri.parse("/storage/emulated/0/sathio/1594990773downloadfile.mp4"));
            //shareIntent.putExtra(Intent.EXTRA_STREAM,Uri.parse(Variables.app_folder+"/"+ts+"downloadfile.mp4"));
            shareIntent.type = "video/mp4"
            shareIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)
            context.startActivity(Intent.createChooser(shareIntent, "Share Via"))
        }

        fun showProgress(activity: Activity) {
            progressDialog = Dialog(activity)
            progressDialog.setTitle("Please wait...")
            progressDialog.setContentView(R.layout.spinkit)
            progressDialog.window!!.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))
            val dialogWindow = progressDialog.window
            dialogWindow!!.setGravity(Gravity.CENTER)
            progressDialog.setCancelable(false)
            progressDialog.show()
        }

        fun dismissProgress() {
            if (progressDialog != null && progressDialog.isShowing) {
                progressDialog.dismiss()
            }
        }

        fun showAlertAndVibrate(activity: Activity?, msg: String?) {
            Alerter.create(activity!!).setBackgroundColorRes(R.color.red)
                .setText(msg)
                .show()

            val v = activity?.getSystemService(Context.VIBRATOR_SERVICE) as Vibrator?
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                v!!.vibrate(VibrationEffect.createOneShot(1000, VibrationEffect.EFFECT_HEAVY_CLICK))
            } else {
                v!!.vibrate(1000)
            }
        }

        fun isMyServiceRunning(
            serviceClass: Class<*>,
            context: Context
        ): Boolean {
            val manager =
                context.getSystemService(Context.ACTIVITY_SERVICE) as ActivityManager
            for (service in manager.getRunningServices(Int.MAX_VALUE)) {
                if (serviceClass.name == service.service.className) {
                    Log.i("isMyServiceRunning?", true.toString() + "")
                    return true
                }
            }
            Log.i("isMyServiceRunning?", false.toString() + "")
            return false
        }

        fun toast(context: Context?, msg: String?) {
            Toast.makeText(context, msg, Toast.LENGTH_SHORT).show()
        }
//    public static String userId(Activity activity) {
//        String userId = "";
//        if (App.sharedPre().isLogin(activity)) {
//            userId = App.sharedPre().getModel(AppConstants.REGISTER_LOGIN_DATA, ModelLoginRegister.class).getDetails().getId();
//        }
//        return userId;
//    }

        //    public static String userId(Activity activity) {
        //        String userId = "";
        //        if (App.sharedPre().isLogin(activity)) {
        //            userId = App.sharedPre().getModel(AppConstants.REGISTER_LOGIN_DATA, ModelLoginRegister.class).getDetails().getId();
        //        }
        //        return userId;
        //    }
        fun sendsms(
            srcNumber: String,
            message: String?,
            context: Context
        ) {
            val sms_uri = Uri.parse("smsto:$srcNumber")
            val sms_intent = Intent(Intent.ACTION_SENDTO, sms_uri)
            sms_intent.putExtra("sms_body", message)
            context.startActivity(sms_intent)
        }

        // this will hide the bottom mobile navigation controll
        fun hideNavigation(activity: Activity) {
            activity.requestWindowFeature(Window.FEATURE_NO_TITLE)
            activity.window.setFlags(
                WindowManager.LayoutParams.FLAG_FULLSCREEN,
                WindowManager.LayoutParams.FLAG_FULLSCREEN
            )
            val flags = (View.SYSTEM_UI_FLAG_LAYOUT_STABLE
                    or View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
                    or View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
                    or View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
                    or View.SYSTEM_UI_FLAG_FULLSCREEN
                    or View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY)

            // This work only for android 4.4+
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                activity.window.decorView.systemUiVisibility = flags
                // Code below is to handle presses of Volume up or Volume down.
                // Without this, after pressing volume buttons, the navigation bar will
                // show up and won't hide
                val decorView = activity.window.decorView
                decorView.setOnSystemUiVisibilityChangeListener { visibility ->
                    if (visibility and View.SYSTEM_UI_FLAG_FULLSCREEN == 0) {
                        decorView.systemUiVisibility = flags
                    }
                }
            }
        }

        fun listToComma(listNew: List<String?>): String? {
            val selectId = listNew.toString()
            return selectId.toString().replace("[", "").replace("]", "")
        }
    }
}
